/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import type { RootState } from '../../app/store';
import { ICar } from '../../interfaces/ICar';
import fetchCount from './carsAPI';

export interface CarsState {
  list: ICar[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CarsState = {
  list: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'cars/fetchCount',
  async (car: ICar, thunkAPI) => {
    const state = thunkAPI.getState() as RootState;
    car.id = state.cars.list.length + 1 || 0;
    const response = await fetchCount(car);

    return response.data;
  },
);

export const carsSlice = createSlice({
  name: 'cars',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.list.push({
        id: state.list.length + 1,
        name: 'Polo',
        brand: 'Volkswagem',
        hp: 128,
      });
    },
    decrement: (state) => {
      state.list.pop();
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<ICar>) => {
      state.list.push(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.list.push(action.payload);
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { increment, decrement, incrementByAmount } = carsSlice.actions;

// The function below is called a selector and allows us to select a list from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.cars.list)`
export const selectCount = (state: RootState) => state.cars.list;

export default carsSlice.reducer;
